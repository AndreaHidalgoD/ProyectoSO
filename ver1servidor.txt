#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <mysql.h>
#include <ctype.h>

int main (int argc, char *argv[]) 
{
	
	//CONECTAR BASE DE DADES
	MYSQL *conn;
	int err;
	// Estructura especial para almacenar resultados de consultas 
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	char consulta [80];
	//Creamos una conexion al servidor MYSQL 
	conn = mysql_init(NULL);
	if (conn==NULL) {
		printf ("Error al crear la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//inicializar la conexion
	conn = mysql_real_connect (conn, "localhost","root", "mysql", "db",0, NULL, 0);
	if (conn==NULL) {
		printf ("Error al inicializar la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	
	// CONECTAR SERVIDOR-CLIENT
	int sock_conn, sock_listen, ret;
	struct sockaddr_in serv_adr;
	char peticion[512]; //peticion buff
	char respuesta[512]; //respuesta buff2
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0) //crear socket de escucha
		printf("Error creant socket");
	// Fem el bind al port
	
	
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY); //indicamos a cualquier
	// escucharemos en el port 9200
	serv_adr.sin_port = htons(9268); 
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0) //asociamos al socket las esecificaciones anteriores
		printf ("Error al bind\n");
	//La cola de peticiones pendientes no podr? ser superior a 4
	if (listen(sock_listen, 2) < 0) //lo ponemos en pasivo. EL 2 es el numero de objetos en cola
		printf("Error en el Listen");
	
	int i;
	// Bucle infinito
	for (;;){
		printf ("Escuchando\n");
		
		sock_conn = accept(sock_listen, NULL, NULL);
		printf ("He recibido conexion\n");
		//sock_conn es el socket que usaremos para este cliente
		
		int terminar =0;
		// Entramos en un bucle para atender todas las peticiones de este cliente
		//hasta que se desconecte
		while (terminar ==0)
		{
			// Ahora recibimos la petici?n
			ret=read(sock_conn,peticion, sizeof(peticion));
			printf ("Recibido\n");
			
			// Tenemos que a?adirle la marca de fin de string 
			// para que no escriba lo que hay despues en el buffer
			peticion[ret]='\0';
			
			printf ("Peticion: %s\n",peticion);
			
			// vamos a ver que quieren
			char *p = strtok( peticion, "/");
			int codigo =  atoi (p);
			printf("numero de codigo %d\n",codigo);
			// Ya tenemos el c?digo de la petici?n
			char nombre[20];
			if (codigo !=0 && codigo!=3)
			{
				printf("entro codigo dif0");
				p = strtok( NULL, "/"); //segundo trozo
				strcpy (nombre, p);
				// Ya tenemos el nombre
				printf ("Codigo: %d, Nombre: %s\n", codigo, nombre);
			}
			if (codigo ==0) //petici?n de desconexi?n
				terminar=1;
			
			else if (codigo ==1)
			{
				printf("entro en 1\n");
				strcpy(consulta,"SELECT DISTINCT JUGADOR.ID FROM(PARTIDA, JUGADOR, CONNECTOR) WHERE PARTIDA.ID IN (SELECT PARTIDA.ID FROM(PARTIDA, JUGADOR, CONNECTOR) WHERE JUGADOR.ID= '");
				strcat(consulta,nombre);
				strcat(consulta,"' AND JUGADOR.ID= CONNECTOR.ID_J AND CONNECTOR.ID_P=PARTIDA.ID) AND PARTIDA.ID= CONNECTOR.ID_P AND CONNECTOR.ID_J=JUGADOR.ID AND JUGADOR.ID NOT IN ('");
				strcat(consulta,nombre);
				strcat(consulta,"')"); 
				printf("%s\n",consulta);
				// CONSULTA
				err=mysql_query (conn, consulta); 
				if(err!=0){
					printf("Error al consultar datos de la base \u0153u \u0153s\n", mysql_errno(conn),mysql_error(conn));
					exit(1);
				}
				resultado = mysql_store_result (conn);
				row = mysql_fetch_row (resultado);
				if (row == NULL)
				{
					row[0]='0';
					sprintf (respuesta, "%s" , row[0]);
				}
				else
				{
					sprintf (respuesta, "%s", row[0]);
					printf("Entra al i=0\n");
					row = mysql_fetch_row (resultado);
					while (row!=NULL)
					{
						sprintf (respuesta, "%s,%s", respuesta, row[0]);
						i=i+1;
						row = mysql_fetch_row (resultado);
					}
				}
				printf("%s\n",respuesta);
			}
			
			else if (codigo ==2) //Obtener el jugador que ha obtenido mas puntos en una partida
			{
				printf("entro codigo2\n");
				strcpy(consulta,"SELECT DISTINCT JUGADOR.ID FROM(JUGADOR,CONNECTOR,PARTIDA) WHERE JUGADOR.TOTALPUNTS = (SELECT DISTINCT MAX(JUGADOR.TOTALPUNTS) FROM(JUGADOR, PARTIDA, CONNECTOR) WHERE CONNECTOR.ID_P = ");
				strcat(consulta,nombre);
				strcat(consulta," AND CONNECTOR.ID_J =JUGADOR.ID) AND JUGADOR.ID = CONNECTOR.ID_J AND CONNECTOR.ID_P = ");
				strcat(consulta,nombre);
				printf("%s\n",consulta);
				err=mysql_query (conn,consulta);
				if(err!=0){
					printf("Error al consultar datos de la base \u0153u \u0153s\n", mysql_errno(conn),mysql_error(conn));
					exit(1);
				}
				resultado = mysql_store_result (conn);
				row = mysql_fetch_row (resultado);
				if (row == NULL)
				{
					printf("row null\n");
					row[0]='0';
					sprintf (respuesta, "%s" , row[0]);
				}
				else 
					printf("todo ok\n");
					sprintf (respuesta, "%s", row[0]);
			}
			else if (codigo ==3)
			{
				printf("entro bien");
				strcpy (consulta,"SELECT PARTIDA.ID FROM(PARTIDA) WHERE PARTIDA.TEMPS =(SELECT MIN(PARTIDA.TEMPS) FROM PARTIDA) AND PARTIDA.TEMPS < 1500"); 
				
				// hacemos la consulta 
				err=mysql_query (conn, consulta); 
				if (err!=0) {
					printf ("Error al consultar datos de la base %u %s\n",
							mysql_errno(conn), mysql_error(conn));
					exit (1);
				}
				//recogemos el resultado de la consulta 
				resultado = mysql_store_result (conn); 
				row = mysql_fetch_row (resultado);
				if (row == NULL){
					sprintf (respuesta,"No se han obtenido datos en la consulta");
					printf ("No se han obtenido datos en la consulta\n");
				}
				else{
					// El resultado debe ser una matriz con una sola fila
					// y una columna que contiene el nombre
					sprintf (respuesta,"ID de la partida mas corta: %s", row[0] );
					printf ("ID de la partida mas corta: %s\n", row[0] );
				}
			}
			
			else if (codigo==4) //LOG IN
			{
				p = strtok( NULL, "/"); //tercer trozo
				char contrasenya [20];
				strcpy (contrasenya, p);
				printf("%s\n",nombre);
				printf("%s\n",contrasenya);
				strcpy(consulta,"SELECT JUGADOR.CONTRASENYA FROM (JUGADOR) WHERE JUGADOR.ID ='");
				strcat(consulta,nombre);
				strcat(consulta,"'");
				err=mysql_query (conn, consulta); 
				if (err!=0) {
					printf ("Error al consultar datos de la base %u %s\n",
							mysql_errno(conn), mysql_error(conn));
					exit (1);
				}
				//recogemos el resultado de la consulta 
				resultado = mysql_store_result (conn); 
				row = mysql_fetch_row (resultado);
				printf(row[0]);
				if (row == NULL){
					sprintf (respuesta,"NO EXISTE");
					printf ("No se han obtenido datos en la consulta\n");
				}
				else{
					// El resultado debe ser una matriz con una sola fila
					// y una columna que contiene el nombre
					if (strcmp(row[0],contrasenya)==0)
					{
						sprintf (respuesta,"OK");
						printf ("OK\n");
					}
					else{
						sprintf (respuesta,"INCORRECTA");
						printf ("CONTRASENYA INCORRECTA\n");
					}
				}
			}
			
			else if (codigo==5) //SIGN IN
			{
				p = strtok( NULL, "/"); //tercer trozo
				char contrasenya [20];
				strcpy (contrasenya, p);
				strcpy(consulta,"SELECT JUGADOR.CONTRASENYA FROM (JUGADOR) WHERE JUGADOR.ID = '");
				strcat(consulta,nombre);
				strcat(consulta,"'");
				printf("%s\n",consulta);
				err=mysql_query (conn, consulta); 
				if (err!=0) {
					printf ("Error al consultar datos de la base %u %s\n",
							mysql_errno(conn), mysql_error(conn));
					exit (1);
				}
				//recogemos el resultado de la consulta 
				resultado = mysql_store_result (conn); 
				row = mysql_fetch_row (resultado);
				if (row == NULL){
					char consulta2 [1000];
					strcpy(consulta2,"INSERT INTO JUGADOR VALUES ('");
					strcat(consulta2,nombre);
					strcat(consulta2,"','");
					strcat(consulta2,contrasenya);
					strcat(consulta2,"',0)");
					printf("%s\n",consulta2);
					err=mysql_query (conn, consulta2); 
					if (err!=0) {
						sprintf(respuesta,"ERROR");
						printf ("Error al introducir los datos de la base %u %s\n",
								mysql_errno(conn), mysql_error(conn));
						exit (1);
					}
					//recogemos el resultado de la consulta 
					else{
						sprintf (respuesta,"OK");
						printf ("OK\n");
					}
				}
				else{
					sprintf (respuesta,"YA EXISTE");
					printf ("YA EXISTE EL USUARIO\n");
				}
			}
			
			if (codigo != 0)
			{
				printf ("Respuesta: %s\n", respuesta);
				// Y lo enviamos
				write (sock_conn,respuesta, strlen(respuesta));// socket de conexion, respuesta, longitud de la respuesta
			}
		}
		// Se acabo el servicio para este cliente
		close(sock_conn); 
		mysql_close(conn);
		exit(0);
	}
}

